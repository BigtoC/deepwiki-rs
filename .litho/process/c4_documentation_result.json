{
  "overview_doc": {
    "title": "项目概述",
    "filename": "Overview.md",
    "content": "# 项目概述\n\n## 项目概述\n该项目是一个基于Rust的架构分析和代码检测工具，采用模块化和分层架构设计。项目主要由41个核心组件组成，每个组件负责特定功能，如架构检测、文件探索、依赖分析和代码分析。项目使用Rust语言实现，以满足对性能和安全性的高要求。项目结构清晰，目录组织合理，便于维护和扩展。项目遵循单一职责原则和开闭原则，组件间依赖关系相对简单，没有循环依赖问题。项目代码质量较高，平均评分为8.1/10，但仍有改进空间。项目主要处理图像文件（png, jpg）和Rust源代码文件（rs），需要考虑图像处理和Rust生态系统的特性。\n\n## 核心功能与作用\n### 主要功能\n- 架构检测\n- 文件探索\n- 依赖分析\n- 代码分析\n- 配置管理\n- 客户端交互\n\n### 关键特性\n- 模块化架构\n- 分层架构\n- 高性能Rust实现\n- 图像处理能力\n- 清晰的目录结构\n- 良好的代码质量\n\n### 业务价值\n该项目提供了一个高性能的架构分析和代码检测平台，能够有效检测和分析代码架构，探索文件结构，分析依赖关系，并提供代码分析功能。其模块化设计和高性能实现使其特别适合需要严格代码质量和架构完整性的大型项目。\n\n## 技术选型\n### 主要编程语言\n- Rust\n\n### 框架和库\n- 无明确框架\n\n### 开发工具\n- TOML\n- Cargo\n\n### 技术选型理由\n项目选择Rust作为主要编程语言，以满足对性能和安全性的高要求。Rust的所有权模型和零成本抽象特性使其特别适合需要高性能和内存安全的应用。项目使用TOML作为配置文件格式，Cargo作为Rust的包管理和构建工具。\n\n## 项目统计\n- **文件总数**: 55\n- **核心组件数**: 41\n- **主要文件类型**: png: 3, jpg: 1, rs: 41, toml: 1, lock: 1, md: 3\n\n",
    "doc_type": "overview"
  },
  "architecture_doc": {
    "title": "架构文档",
    "filename": "Architecture.md",
    "content": "# 架构文档\n\n## 整体架构\n该系统采用模块化架构和分层架构模式，具有清晰的模块化结构和良好的职责分离。系统主要使用Rust语言开发，注重性能和安全性。核心组件包括架构检测、文件探索、依赖分析、代码分析、图像预处理、架构文档生成等。系统设计遵循单一职责原则、开闭原则和依赖倒置原则，具有良好的扩展性和可维护性。\n\n### 架构模式\n- 模块化架构\n- 分层架构\n\n### 设计原则\n- 单一职责原则\n- 开闭原则\n- 依赖倒置原则\n- 模块化设计\n- 清晰的目录结构\n- 高性能和安全性\n- 图像处理优化\n- 全面的测试策略\n- 依赖注入\n- 定期代码审查\n\n## 核心流程\n### 图像处理流水线\n**描述**: 图像处理流水线\n\n**处理步骤**:\n1. 图像预处理\n2. 架构检测\n3. 文件探索\n4. 依赖分析\n5. 代码分析\n\n**涉及组件**:\n- preprocessing_agent.rs\n- architecture_detector.rs\n- file_explorer.rs\n- dependency_analyzer.rs\n- code_analyzer.rs\n\n### 架构文档生成\n**描述**: 架构文档生成\n\n**处理步骤**:\n1. 研究与分析\n2. 文档生成\n3. 客户端交互\n4. 类型定义\n\n**涉及组件**:\n- c4_documentation_agent.rs\n- research_agent.rs\n- client.rs\n- types.rs\n\n## 核心模块详解\n### architecture_detector.rs\n**用途**: 架构检测\n\n**主要职责**:\n- 检测系统架构\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### file_explorer.rs\n**用途**: 文件探索\n\n**主要职责**:\n- 探索文件系统\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### dependency_analyzer.rs\n**用途**: 依赖分析\n\n**主要职责**:\n- 分析组件依赖\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### mod.rs (tools)\n**用途**: 工具模块管理\n\n**主要职责**:\n- 管理工具模块\n\n**提供接口**:\n- 模块初始化和管理\n\n### code_analyzer.rs\n**用途**: 代码分析\n\n**主要职责**:\n- 分析代码质量\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### types.rs\n**用途**: 类型定义\n\n**主要职责**:\n- 定义系统类型\n\n**提供接口**:\n- 类型定义和管理\n\n### client.rs\n**用途**: 客户端交互\n\n**主要职责**:\n- 与LLM进行交互\n\n**提供接口**:\n- 与LLM的交互接口\n\n### mod.rs (llm)\n**用途**: LLM模块管理\n\n**主要职责**:\n- 管理LLM模块\n\n**提供接口**:\n- 模块初始化和管理\n\n### mod.rs (cache)\n**用途**: 缓存模块管理\n\n**主要职责**:\n- 管理缓存模块\n\n**提供接口**:\n- 模块初始化和管理\n\n### config.rs\n**用途**: 配置管理\n\n**主要职责**:\n- 管理系统配置\n\n**提供接口**:\n- 配置管理接口\n\n### lib.rs\n**用途**: 库管理\n\n**主要职责**:\n- 管理系统库\n\n**提供接口**:\n- 库初始化和管理\n\n### preprocessing_agent.rs\n**用途**: 图像预处理\n\n**主要职责**:\n- 预处理图像数据\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### mod.rs (agents)\n**用途**: 代理模块管理\n\n**主要职责**:\n- 管理代理模块\n\n**提供接口**:\n- 模块初始化和管理\n\n### c4_documentation_agent.rs\n**用途**: 架构文档生成\n\n**主要职责**:\n- 生成C4架构文档\n\n**提供接口**:\n- 与其他模块的交互接口\n\n### research_agent.rs\n**用途**: 研究与分析\n\n**主要职责**:\n- 进行研究和分析\n\n**提供接口**:\n- 与其他模块的交互接口\n\n",
    "doc_type": "architecture"
  },
  "core_components": [
    {
      "component_name": "architecture_detector.rs",
      "filename": "architecture_detector.md",
      "content": "# architecture_detector.rs 模块\n\n## 模块功能与作用\narchitecture_detector.rs 组件用于分析项目的架构和技术栈。它可以检测项目中使用的设计模式、项目类型、配置文件内容以及项目中使用的编程语言。该组件通过分析项目结构和文件内容来提供关于项目架构的见解。\n\n### 主要职责\n- 检测项目中使用的设计模式\n- 确定项目的类型\n- 分析配置文件内容\n- 检测项目中使用的编程语言\n\n## 工作流程\n### 步骤 1: 初始化 ArchitectureDetector 实例\n**输入**:\n- 项目路径\n\n**输出**:\n- ArchitectureDetector 实例\n\n### 步骤 2: 检测项目中使用的设计模式\n**输入**:\n- ArchitectureDetector 实例\n\n**输出**:\n- PatternDetectionResult\n\n### 步骤 3: 确定项目的类型\n**输入**:\n- ArchitectureDetector 实例\n\n**输出**:\n- ProjectType\n\n### 步骤 4: 分析配置文件内容\n**输入**:\n- ArchitectureDetector 实例\n\n**输出**:\n- ConfigAnalysis\n\n### 步骤 5: 检测项目中使用的编程语言\n**输入**:\n- ArchitectureDetector 实例\n\n**输出**:\n- LanguageDetectionResult\n\n## 内部架构与结构\n### 主要类/结构\n- ArchitectureDetector\n\n### 关键方法\n- detect_patterns\n- detect_project_type\n- analyze_config_content\n- detect_languages_from_files\n\n### 数据结构\n- PatternDetectionResult\n- ProjectType\n- ConfigAnalysis\n- LanguageDetectionResult\n\n### 设计模式\n- Singleton\n- Factory Method\n\n## 提供的接口\n- new\n- detect_patterns\n- detect_project_type\n- analyze_config_content\n- detect_languages_from_files\n\n",
      "functionality": "architecture_detector.rs 组件用于分析项目的架构和技术栈。它可以检测项目中使用的设计模式、项目类型、配置文件内容以及项目中使用的编程语言。该组件通过分析项目结构和文件内容来提供关于项目架构的见解。",
      "workflow": "1. 初始化 ArchitectureDetector 实例\n2. 检测项目中使用的设计模式\n3. 确定项目的类型\n4. 分析配置文件内容\n5. 检测项目中使用的编程语言",
      "internal_architecture": "主要类: ArchitectureDetector\n关键方法: detect_patterns, detect_project_type, analyze_config_content, detect_languages_from_files\n数据结构: PatternDetectionResult, ProjectType, ConfigAnalysis, LanguageDetectionResult"
    },
    {
      "component_name": "file_explorer.rs",
      "filename": "file_explorer.md",
      "content": "# file_explorer.rs 模块\n\n## 模块功能与作用\nfile_explorer.rs 是一个 Rust 结构化组件，主要功能是提供文件系统的探索和分析能力。它能够列出目录内容，查找文件，分析文件结构，并创建文件信息。该组件在系统中扮演着文件系统交互的核心角色，为其他组件提供文件系统的基本操作和分析服务。\n\n### 主要职责\n- 列出目录内容\n- 查找文件\n- 分析文件结构\n- 创建文件信息\n\n## 工作流程\n### 步骤 1: 初始化文件探索器实例。\n**输入**:\n- 配置参数\n\n**输出**:\n- FileExplorer 实例\n\n### 步骤 2: 列出指定目录的内容。\n**输入**:\n- 目录路径\n\n**输出**:\n- 目录内容列表\n\n### 步骤 3: 在指定目录中查找文件。\n**输入**:\n- 目录路径\n- 文件名\n\n**输出**:\n- 匹配的文件列表\n\n### 步骤 4: 分析文件或目录的结构。\n**输入**:\n- 文件或目录路径\n\n**输出**:\n- 结构分析结果\n\n### 步骤 5: 创建文件信息对象。\n**输入**:\n- 文件路径\n\n**输出**:\n- FileInfo 对象\n\n## 内部架构与结构\n### 主要类/结构\n- FileExplorer\n- FileSystemNode\n\n### 关键方法\n- new\n- list_directory\n- find_files\n- analyze_structure\n- create_file_info\n\n### 数据结构\n- FileInfo\n- DirectoryEntry\n\n### 设计模式\n- Factory Method\n- Composite\n\n## 提供的接口\n- new\n- list_directory\n- find_files\n- analyze_structure\n- create_file_info\n\n",
      "functionality": "file_explorer.rs 是一个 Rust 结构化组件，主要功能是提供文件系统的探索和分析能力。它能够列出目录内容，查找文件，分析文件结构，并创建文件信息。该组件在系统中扮演着文件系统交互的核心角色，为其他组件提供文件系统的基本操作和分析服务。",
      "workflow": "1. 初始化文件探索器实例。\n2. 列出指定目录的内容。\n3. 在指定目录中查找文件。\n4. 分析文件或目录的结构。\n5. 创建文件信息对象。",
      "internal_architecture": "主要类: FileExplorer, FileSystemNode\n关键方法: new, list_directory, find_files, analyze_structure, create_file_info\n数据结构: FileInfo, DirectoryEntry"
    },
    {
      "component_name": "dependency_analyzer.rs",
      "filename": "dependency_analyzer.md",
      "content": "# dependency_analyzer.rs 模块\n\n## 模块功能与作用\ndependency_analyzer.rs 是一个用于分析代码依赖关系的工具组件。它的主要功能是发现和分析项目中的依赖关系，帮助开发者理解代码之间的关联，从而更好地进行代码维护和重构。该组件可以处理不同语言的源代码文件，并提供详细的依赖关系分析报告。\n\n### 主要职责\n- 发现项目中的源代码文件\n- 分析源代码文件的依赖关系\n- 构建依赖关系图\n- 检测源代码文件的编程语言\n\n## 工作流程\n### 步骤 1: 初始化依赖分析器\n**输出**:\n- DependencyAnalyzer 实例\n\n### 步骤 2: 发现项目中的源代码文件\n**输入**:\n- 项目路径\n\n**输出**:\n- 源代码文件列表\n\n### 步骤 3: 分析每个源代码文件的依赖关系\n**输入**:\n- 源代码文件列表\n\n**输出**:\n- 每个文件的依赖关系列表\n\n### 步骤 4: 构建依赖关系图\n**输入**:\n- 每个文件的依赖关系列表\n\n**输出**:\n- 依赖关系图\n\n### 步骤 5: 输出依赖关系分析报告\n**输入**:\n- 依赖关系图\n\n**输出**:\n- 依赖关系分析报告\n\n## 内部架构与结构\n### 主要类/结构\n- DependencyAnalyzer\n- SourceFileAnalyzer\n- DependencyGraph\n\n### 关键方法\n- new\n- analyze_dependencies\n- discover_source_files\n- analyze_file_dependencies\n- detect_language\n\n### 数据结构\n- DependencyGraph\n- SourceFile\n- Dependency\n\n### 设计模式\n- Singleton\n- Factory Method\n\n## 提供的接口\n- new\n- analyze_dependencies\n- discover_source_files\n- analyze_file_dependencies\n- detect_language\n\n",
      "functionality": "dependency_analyzer.rs 是一个用于分析代码依赖关系的工具组件。它的主要功能是发现和分析项目中的依赖关系，帮助开发者理解代码之间的关联，从而更好地进行代码维护和重构。该组件可以处理不同语言的源代码文件，并提供详细的依赖关系分析报告。",
      "workflow": "1. 初始化依赖分析器\n2. 发现项目中的源代码文件\n3. 分析每个源代码文件的依赖关系\n4. 构建依赖关系图\n5. 输出依赖关系分析报告",
      "internal_architecture": "主要类: DependencyAnalyzer, SourceFileAnalyzer, DependencyGraph\n关键方法: new, analyze_dependencies, discover_source_files, analyze_file_dependencies, detect_language\n数据结构: DependencyGraph, SourceFile, Dependency"
    },
    {
      "component_name": "code_analyzer.rs",
      "filename": "code_analyzer.md",
      "content": "# code_analyzer.rs 模块\n\n## 模块功能与作用\ncode_analyzer.rs 是一个用于分析代码的 Rust 组件。它主要负责分析代码文件，检测编程语言，并计算基本代码指标。该组件特别优化用于分析 Rust 代码，提供有关代码质量和复杂性的见解。\n\n### 主要职责\n- 分析代码文件\n- 检测编程语言\n- 计算基本代码指标\n- 提供代码质量和复杂性见解\n\n## 工作流程\n### 步骤 1: 初始化代码分析器\n**输入**:\n- 配置参数\n\n**输出**:\n- 初始化的 CodeAnalyzer 实例\n\n### 步骤 2: 分析代码文件\n**输入**:\n- 文件路径\n\n**输出**:\n- 代码指标和分析结果\n\n### 步骤 3: 检测代码文件的编程语言\n**输入**:\n- 文件内容\n\n**输出**:\n- 检测到的编程语言\n\n### 步骤 4: 计算基本代码指标\n**输入**:\n- 代码内容\n\n**输出**:\n- 基本代码指标\n\n### 步骤 5: 分析 Rust 代码\n**输入**:\n- Rust 代码内容\n\n**输出**:\n- Rust 代码分析结果\n\n## 内部架构与结构\n### 主要类/结构\n- CodeAnalyzer\n- RustAnalyzer\n\n### 关键方法\n- analyze_file\n- detect_language\n- analyze_basic_metrics\n- analyze_rust_code\n\n### 数据结构\n- CodeMetrics\n- AnalysisResult\n\n### 设计模式\n- 策略模式\n- 工厂模式\n\n## 提供的接口\n- new\n- analyze_file\n- detect_language\n- analyze_basic_metrics\n- analyze_rust_code\n\n",
      "functionality": "code_analyzer.rs 是一个用于分析代码的 Rust 组件。它主要负责分析代码文件，检测编程语言，并计算基本代码指标。该组件特别优化用于分析 Rust 代码，提供有关代码质量和复杂性的见解。",
      "workflow": "1. 初始化代码分析器\n2. 分析代码文件\n3. 检测代码文件的编程语言\n4. 计算基本代码指标\n5. 分析 Rust 代码",
      "internal_architecture": "主要类: CodeAnalyzer, RustAnalyzer\n关键方法: analyze_file, detect_language, analyze_basic_metrics, analyze_rust_code\n数据结构: CodeMetrics, AnalysisResult"
    },
    {
      "component_name": "client.rs",
      "filename": "client.md",
      "content": "# client.rs 模块\n\n## 模块功能与作用\nclient.rs 组件是一个 Rust 结构体，主要功能是与大型语言模型（LLM）进行交互。它提供了一个客户端接口，用于发送提示（prompt）并接收模型的响应。该组件在系统中扮演着桥梁的角色，连接应用程序和底层的LLM服务，使得应用程序可以方便地调用语言模型的功能。\n\n### 主要职责\n- 与大型语言模型（LLM）进行交互\n- 提供客户端接口用于发送提示（prompt）并接收模型的响应\n- 连接应用程序和底层的LLM服务\n\n## 工作流程\n### 步骤 1: 创建一个新的LLMClient实例。\n**输入**:\n- 配置参数\n\n**输出**:\n- LLMClient实例\n\n### 步骤 2: 使用创建的LLMClient实例发送提示（prompt）到LLM模型。\n**输入**:\n- LLMClient实例\n- 提示（prompt）文本\n\n**输出**:\n- 模型的响应\n\n## 内部架构与结构\n### 主要类/结构\n- LLMClient\n\n### 关键方法\n- new\n- prompt\n\n### 设计模式\n- Factory Pattern\n\n## 提供的接口\n- new\n- prompt\n- LLMClient\n\n",
      "functionality": "client.rs 组件是一个 Rust 结构体，主要功能是与大型语言模型（LLM）进行交互。它提供了一个客户端接口，用于发送提示（prompt）并接收模型的响应。该组件在系统中扮演着桥梁的角色，连接应用程序和底层的LLM服务，使得应用程序可以方便地调用语言模型的功能。",
      "workflow": "1. 创建一个新的LLMClient实例。\n2. 使用创建的LLMClient实例发送提示（prompt）到LLM模型。",
      "internal_architecture": "主要类: LLMClient\n关键方法: new, prompt\n数据结构: "
    },
    {
      "component_name": "mod.rs",
      "filename": "mod.md",
      "content": "# mod.rs 模块\n\n## 模块功能与作用\nmod.rs 是一个 Rust 模块，主要用于定义和组织与缓存相关的功能。它可能包含缓存的初始化、配置、操作和管理等功能。由于代码行数较少且圈复杂度低，该模块可能主要用于声明和导出其他模块或函数，而非包含复杂的逻辑。\n\n### 主要职责\n- 定义和组织与缓存相关的功能\n- 初始化和配置缓存\n- 提供缓存操作的接口\n- 管理缓存的生命周期\n\n## 工作流程\n## 内部架构与结构\n",
      "functionality": "mod.rs 是一个 Rust 模块，主要用于定义和组织与缓存相关的功能。它可能包含缓存的初始化、配置、操作和管理等功能。由于代码行数较少且圈复杂度低，该模块可能主要用于声明和导出其他模块或函数，而非包含复杂的逻辑。",
      "workflow": "",
      "internal_architecture": "主要类: \n关键方法: \n数据结构: "
    },
    {
      "component_name": "config.rs",
      "filename": "config.md",
      "content": "# config.rs 模块\n\n## 模块功能与作用\nconfig.rs 组件负责管理和配置应用程序的配置设置。它提供了从文件加载配置、获取内部路径、处理数据路径和临时路径等功能。该组件在系统中扮演着配置中心的角色，确保应用程序能够正确加载和使用配置信息。\n\n### 主要职责\n- 加载和解析配置文件\n- 提供配置信息的访问接口\n- 管理应用程序的路径设置\n\n## 工作流程\n### 步骤 1: 从指定的文件路径加载配置文件。\n**输入**:\n- 文件路径\n\n**输出**:\n- 配置对象\n\n### 步骤 2: 解析配置文件内容，将其转换为应用程序可以使用的配置对象。\n**输入**:\n- 配置文件内容\n\n**输出**:\n- 配置对象\n\n### 步骤 3: 提供对配置信息的访问接口，包括内部路径、处理数据路径和临时路径。\n**输入**:\n- 配置对象\n\n**输出**:\n- 路径信息\n\n## 内部架构与结构\n### 主要类/结构\n- Config\n\n### 关键方法\n- from_file\n- get_internal_path\n- get_process_data_path\n- get_temp_path\n\n### 数据结构\n- Config\n- PathBuf\n\n### 设计模式\n- Singleton\n\n## 提供的接口\n- from_file\n- get_internal_path\n- get_process_data_path\n- get_temp_path\n- default\n\n",
      "functionality": "config.rs 组件负责管理和配置应用程序的配置设置。它提供了从文件加载配置、获取内部路径、处理数据路径和临时路径等功能。该组件在系统中扮演着配置中心的角色，确保应用程序能够正确加载和使用配置信息。",
      "workflow": "1. 从指定的文件路径加载配置文件。\n2. 解析配置文件内容，将其转换为应用程序可以使用的配置对象。\n3. 提供对配置信息的访问接口，包括内部路径、处理数据路径和临时路径。",
      "internal_architecture": "主要类: Config\n关键方法: from_file, get_internal_path, get_process_data_path, get_temp_path\n数据结构: Config, PathBuf"
    },
    {
      "component_name": "preprocessing_agent.rs",
      "filename": "preprocessing_agent.md",
      "content": "# preprocessing_agent.rs 模块\n\n## 模块功能与作用\npreprocessing_agent.rs 组件是一个 Rust 结构化代码，主要负责组件的预处理和分析。它通过与 AI 模型的交互来增强组件分析过程。\n\n### 主要职责\n- 处理组件的预处理\n- 分析组件\n- 与 AI 模型交互以增强分析\n- 构建组件分析提示\n\n## 工作流程\n### 步骤 1: 初始化预处理代理\n**输入**:\n- PreprocessingConfig\n\n**输出**:\n- PreprocessingAgent 实例\n\n### 步骤 2: 预处理组件\n**输入**:\n- 组件数据\n- PreprocessingConfig\n\n**输出**:\n- 预处理后的组件数据\n\n### 步骤 3: 分析组件\n**输入**:\n- 预处理后的组件数据\n\n**输出**:\n- 初步分析结果\n\n### 步骤 4: 与 AI 模型交互以增强分析\n**输入**:\n- 初步分析结果\n\n**输出**:\n- 增强后的分析结果\n\n### 步骤 5: 构建组件分析提示\n**输入**:\n- 增强后的分析结果\n\n**输出**:\n- 组件分析提示\n\n## 内部架构与结构\n### 主要类/结构\n- PreprocessingAgent\n- ComponentAnalyzer\n- AIEnhancer\n\n### 关键方法\n- new\n- preprocess\n- analyze_components_with_ai\n- enhance_component_analysis_with_ai\n- build_component_analysis_prompt\n\n### 数据结构\n- Component\n- AnalysisResult\n- PreprocessingConfig\n\n### 设计模式\n- Singleton\n- Factory Method\n\n## 提供的接口\n- new\n- preprocess\n- analyze_components_with_ai\n- enhance_component_analysis_with_ai\n- build_component_analysis_prompt\n\n",
      "functionality": "preprocessing_agent.rs 组件是一个 Rust 结构化代码，主要负责组件的预处理和分析。它通过与 AI 模型的交互来增强组件分析过程。",
      "workflow": "1. 初始化预处理代理\n2. 预处理组件\n3. 分析组件\n4. 与 AI 模型交互以增强分析\n5. 构建组件分析提示",
      "internal_architecture": "主要类: PreprocessingAgent, ComponentAnalyzer, AIEnhancer\n关键方法: new, preprocess, analyze_components_with_ai, enhance_component_analysis_with_ai, build_component_analysis_prompt\n数据结构: Component, AnalysisResult, PreprocessingConfig"
    },
    {
      "component_name": "c4_documentation_agent.rs",
      "filename": "c4_documentation_agent.md",
      "content": "# c4_documentation_agent.rs 模块\n\n## 模块功能与作用\nc4_documentation_agent.rs模块是系统的重要组成部分，负责特定的业务逻辑处理。\n\n## 工作流程\n1. 接收输入数据\n2. 执行核心处理逻辑\n3. 返回处理结果\n\n## 内部架构与结构\n- **文件路径**: src/agents/c4_documentation_agent.rs\n- **组件类型**: rust_struct\n- **重要性分数**: 0.80\n\n",
      "functionality": "c4_documentation_agent.rs模块的主要功能",
      "workflow": "标准的处理工作流程",
      "internal_architecture": "基本的内部架构结构"
    },
    {
      "component_name": "research_agent.rs",
      "filename": "research_agent.md",
      "content": "# research_agent.rs 模块\n\n## 模块功能与作用\nresearch_agent.rs模块是系统的重要组成部分，负责特定的业务逻辑处理。\n\n## 工作流程\n1. 接收输入数据\n2. 执行核心处理逻辑\n3. 返回处理结果\n\n## 内部架构与结构\n- **文件路径**: src/agents/research_agent.rs\n- **组件类型**: rust_struct\n- **重要性分数**: 0.80\n\n",
      "functionality": "research_agent.rs模块的主要功能",
      "workflow": "标准的处理工作流程",
      "internal_architecture": "基本的内部架构结构"
    }
  ],
  "processing_time": 247.851590333,
  "summary": "C4架构文档生成摘要:\n\n📚 生成的文档:\n- Overview.md: 项目概述文档\n- Architecture.md: 架构文档  \n- CoreComponents/: 10 个核心组件文档\n\n📄 文档结构:\n- 项目概述: 包含项目概述、核心功能与作用、技术选型\n- 架构文档: 包含整体架构、核心流程、核心模块详解\n- 组件文档: 每个核心模块的详细文档，包含功能、工作流程、内部架构\n\n✅ 所有文档已按C4架构风格保存到输出目录"
}